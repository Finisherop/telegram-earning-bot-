/**\n * Firebase Safety Validator Component\n * \n * This component runs comprehensive checks to ensure all Firebase\n * user data sync issues are resolved and displays the status.\n */\n\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  initializeUserSafely,\n  createSafeUser,\n  ultimateFirebaseSanitizer\n} from '@/lib/firebaseSafeSyncFix';\nimport { getTelegramUserSafe } from '@/lib/telegramUserSafe';\n\ninterface ValidationResult {\n  test: string;\n  passed: boolean;\n  message: string;\n}\n\nconst FirebaseSafetyValidator = () => {\n  const [validationResults, setValidationResults] = useState<ValidationResult[]>([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [overallStatus, setOverallStatus] = useState<'pending' | 'success' | 'error'>('pending');\n\n  const runValidationTests = async () => {\n    setIsRunning(true);\n    const results: ValidationResult[] = [];\n\n    try {\n      // Test 1: Telegram User Capture\n      try {\n        const telegramUser = getTelegramUserSafe();\n        const hasValidData = telegramUser && (telegramUser.id || telegramUser.source === 'browser');\n        results.push({\n          test: 'Telegram User Capture',\n          passed: hasValidData,\n          message: hasValidData \n            ? `✅ Successfully captured ${telegramUser.source} user data`\n            : '❌ Failed to capture user data'\n        });\n      } catch (error) {\n        results.push({\n          test: 'Telegram User Capture',\n          passed: false,\n          message: `❌ Error: ${error}`\n        });\n      }\n\n      // Test 2: Safe User Object Creation\n      try {\n        const telegramUser = getTelegramUserSafe();\n        const safeUser = createSafeUser(telegramUser);\n        \n        // Check for undefined values\n        const hasUndefined = Object.values(safeUser).some(value => value === undefined);\n        const requiredFields = ['id', 'firstName', 'coins', 'xp', 'level', 'vipTier'];\n        const hasRequiredFields = requiredFields.every(field => (safeUser as any)[field] !== undefined);\n        \n        results.push({\n          test: 'Safe User Object Creation',\n          passed: !hasUndefined && hasRequiredFields,\n          message: !hasUndefined && hasRequiredFields\n            ? '✅ Safe user object created with no undefined values'\n            : '❌ User object contains undefined values or missing required fields'\n        });\n      } catch (error) {\n        results.push({\n          test: 'Safe User Object Creation',\n          passed: false,\n          message: `❌ Error creating safe user: ${error}`\n        });\n      }\n\n      // Test 3: Firebase Data Sanitization\n      try {\n        const testData = {\n          id: '123',\n          name: 'Test User',\n          coins: 100,\n          undefinedField: undefined,\n          nullField: null,\n          nestedObject: {\n            validField: 'test',\n            undefinedNested: undefined\n          }\n        };\n        \n        const sanitized = ultimateFirebaseSanitizer(testData);\n        const sanitizedString = JSON.stringify(sanitized);\n        const hasUndefined = sanitizedString.includes('undefined');\n        \n        results.push({\n          test: 'Firebase Data Sanitization',\n          passed: !hasUndefined,\n          message: !hasUndefined\n            ? '✅ Data sanitization removes all undefined values'\n            : '❌ Sanitized data still contains undefined values'\n        });\n      } catch (error) {\n        results.push({\n          test: 'Firebase Data Sanitization',\n          passed: false,\n          message: `❌ Sanitization error: ${error}`\n        });\n      }\n\n      // Test 4: DOM Ready Check\n      try {\n        const domReady = document.readyState === 'complete';\n        results.push({\n          test: 'DOM Ready State',\n          passed: domReady,\n          message: domReady\n            ? '✅ DOM is ready for Firebase operations'\n            : '⚠️ DOM not yet ready - initialization will wait'\n        });\n      } catch (error) {\n        results.push({\n          test: 'DOM Ready State',\n          passed: false,\n          message: `❌ DOM check error: ${error}`\n        });\n      }\n\n      // Test 5: Safe Initialization System\n      try {\n        const { user, userId } = await initializeUserSafely();\n        const initSuccess = !!(user && userId);\n        \n        results.push({\n          test: 'Safe User Initialization',\n          passed: initSuccess,\n          message: initSuccess\n            ? `✅ User initialization successful (ID: ${userId})`\n            : '❌ User initialization failed'\n        });\n      } catch (error) {\n        results.push({\n          test: 'Safe User Initialization',\n          passed: false,\n          message: `❌ Initialization error: ${error}`\n        });\n      }\n\n      setValidationResults(results);\n      \n      // Determine overall status\n      const allPassed = results.every(result => result.passed);\n      const criticalTestsPassed = results.filter(r => \n        ['Safe User Object Creation', 'Firebase Data Sanitization', 'Safe User Initialization'].includes(r.test)\n      ).every(r => r.passed);\n      \n      setOverallStatus(allPassed ? 'success' : criticalTestsPassed ? 'success' : 'error');\n      \n    } catch (error) {\n      console.error('Validation error:', error);\n      setOverallStatus('error');\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  useEffect(() => {\n    // Auto-run validation on mount\n    setTimeout(runValidationTests, 1000);\n  }, []);\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 max-w-sm\">\n      <motion.div\n        className={`rounded-lg p-4 shadow-lg border-2 ${\n          overallStatus === 'success' ? 'bg-green-50 border-green-200' :\n          overallStatus === 'error' ? 'bg-red-50 border-red-200' :\n          'bg-blue-50 border-blue-200'\n        }`}\n        initial={{ opacity: 0, x: 100 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-bold text-sm\">\n            {overallStatus === 'success' ? '✅ Firebase Safety: OK' :\n             overallStatus === 'error' ? '❌ Firebase Issues Detected' :\n             '🔄 Checking Firebase Safety...'}\n          </h3>\n          \n          <button\n            onClick={runValidationTests}\n            disabled={isRunning}\n            className=\"text-xs px-2 py-1 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50\"\n          >\n            {isRunning ? '🔄' : '🔄 Test'}\n          </button>\n        </div>\n\n        <div className=\"space-y-2 text-xs\">\n          {validationResults.map((result, index) => (\n            <motion.div\n              key={result.test}\n              className={`p-2 rounded ${\n                result.passed ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n              }`}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <div className=\"font-medium\">{result.test}</div>\n              <div className=\"text-xs mt-1\">{result.message}</div>\n            </motion.div>\n          ))}\n        </div>\n        \n        {overallStatus === 'success' && (\n          <div className=\"mt-3 text-xs text-green-600 font-medium text-center\">\n            🎉 All Firebase undefined value issues resolved!\n          </div>\n        )}\n        \n        {overallStatus === 'error' && (\n          <div className=\"mt-3 text-xs text-red-600 font-medium text-center\">\n            ⚠️ Some issues detected. Check console for details.\n          </div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default FirebaseSafetyValidator;\n